[
    Declaration(
        Declaration { 
            ident: "a", 
            val: Num(250) 
        }
    ), 
    Declaration(
        Declaration { 
            ident: "b", 
            val: Num(2) 
        }
    ), 
    Print(
        Str("This progam can do some math:")
    ), 
    Print(
        Bin(
            BinExpr { 
                lhs: Bin(
                    BinExpr { 
                        lhs: Bin(
                            BinExpr { lhs: 
                                Var("a"), 
                                rhs: Var("b"), 
                                op: Mul }
                            ), 
                        rhs: Num(2), 
                        op: Mul 
                    }
                ), 
                rhs: Num(500), 
                op: Sub 
            }
        )
    ), 
    Declaration(Declaration { ident: "x", val: Str("This is a cool string.") }), Declaration(Declaration { ident: "y", val: Str("This is another cool string.") }), Print(Str("The two strings are not equal:")), Print(Bin(BinExpr { lhs: Var("x"), rhs: Var("y"), op: EqSign })), Declaration(Declaration { ident: "c", val: Unary(Bang, Bin(BinExpr { lhs: Unary(Bang, Bool(true)), rhs: Bool(false), op: EqSign })) }), Declaration(Declaration { ident: "d", val: Bool(false) }), Print(Str("But c and d are:")), Print(Bin(BinExpr { lhs: Var("c"), rhs: Var("d"), op: EqSign })), Declaration(Declaration { ident: "i", val: Num(2) }), Declaration(Declaration { ident: "j", val: Str("hello") }), Block([Declaration(Declaration { ident: "i", val: Num(15) }), Declaration(Declaration { ident: "k", val: Bool(false) }), Print(Var("i")), Print(Var("j")), Block([Block([Block([Block([Print(Str("x is different when it's in a small block:")), Declaration(Declaration { ident: "x", val: Bool(true) }), Print(Var("x"))])])])])]), Print(Var("i")), Print(Str("Since k doesn't exist up here, the program crashes here!"))]